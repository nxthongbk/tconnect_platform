import React, { useState, useRef, useEffect } from 'react';
import { MessageCircle, Send, X, Bot, User, Minimize2, Maximize2, RotateCcw } from 'lucide-react';

interface Message {
  id: string;
  type: 'user' | 'ai';
  content: string;
  timestamp: Date;
}

interface AIChatProps {
  isOpen: boolean;
  onToggle: () => void;
}

export default function AIChat({ isOpen, onToggle }: AIChatProps) {
  const [messages, setMessages] = useState<Message[]>([
    {
      id: '1',
      type: 'ai',
      content:
        'Xin ch√†o! T√¥i l√† AI Assistant c·ªßa h·ªá th·ªëng qu·∫£n l√Ω nh√† m√°y. T√¥i c√≥ th·ªÉ gi√∫p b·∫°n:\n\n‚Ä¢ Ki·ªÉm tra tr·∫°ng th√°i thi·∫øt b·ªã\n‚Ä¢ L√™n l·ªãch b·∫£o tr√¨\n‚Ä¢ Qu·∫£n l√Ω kho h√†ng\n‚Ä¢ T·∫°o b√°o c√°o\n‚Ä¢ H∆∞·ªõng d·∫´n s·ª≠ d·ª•ng h·ªá th·ªëng\n\nB·∫°n c·∫ßn h·ªó tr·ª£ g√¨?',
      timestamp: new Date(),
    },
  ]);
  const [inputMessage, setInputMessage] = useState('');
  const [isTyping, setIsTyping] = useState(false);
  const [isMinimized, setIsMinimized] = useState(false);
  const messagesEndRef = useRef<HTMLDivElement>(null);
  const inputRef = useRef<HTMLInputElement>(null);

  const scrollToBottom = () => {
    messagesEndRef.current?.scrollIntoView({ behavior: 'smooth' });
  };

  useEffect(() => {
    scrollToBottom();
  }, [messages]);

  useEffect(() => {
    if (isOpen && !isMinimized) {
      inputRef.current?.focus();
    }
  }, [isOpen, isMinimized]);

  const getAIResponse = (userMessage: string): string => {
    const message = userMessage.toLowerCase();

    // Ki·ªÉm tra tr·∫°ng th√°i thi·∫øt b·ªã
    if (message.includes('thi·∫øt b·ªã') || message.includes('m√°y') || message.includes('tr·∫°ng th√°i')) {
      return `üìä **Tr·∫°ng th√°i thi·∫øt b·ªã hi·ªán t·∫°i:**

üü¢ **Ho·∫°t ƒë·ªông b√¨nh th∆∞·ªùng (3/4):**
‚Ä¢ Hydraulic Press A1 - ƒêang ho·∫°t ƒë·ªông
‚Ä¢ CNC Machine M4 - ƒêang ho·∫°t ƒë·ªông  
‚Ä¢ Conveyor Belt B2 - ƒêang b·∫£o tr√¨

üî¥ **C·∫ßn ch√∫ √Ω (1/4):**
‚Ä¢ Welding Robot R3 - H·ªèng h√≥c

üí° **Khuy·∫øn ngh·ªã:** N√™n ki·ªÉm tra Robot h√†n R3 v√† l√™n l·ªãch s·ª≠a ch·ªØa ngay.`;
    }

    // B·∫£o tr√¨
    if (
      message.includes('b·∫£o tr√¨') ||
      message.includes('maintenance') ||
      message.includes('s·ª≠a ch·ªØa')
    ) {
      return `üîß **L·ªãch b·∫£o tr√¨ s·∫Øp t·ªõi:**

üìÖ **Tu·∫ßn n√†y:**
‚Ä¢ 15/01 - Hydraulic Press A1 (B·∫£o tr√¨ ƒë·ªãnh k·ª≥)
‚Ä¢ 17/01 - Conveyor Belt B2 (S·ª≠a ch·ªØa motor)

‚ö†Ô∏è **C·∫ßn ∆∞u ti√™n:**
‚Ä¢ Welding Robot R3 - C·∫ßn s·ª≠a ch·ªØa kh·∫©n c·∫•p
‚Ä¢ Air Filter - S·∫Øp h·∫øt h·∫°n thay th·∫ø

üìã **ƒê·ªÉ l√™n l·ªãch b·∫£o tr√¨ m·ªõi, v√†o m·ª•c "Maintenance" v√† nh·∫•n "Schedule Maintenance".**`;
    }

    // Kho h√†ng
    if (message.includes('kho') || message.includes('inventory') || message.includes('t·ªìn kho')) {
      return `üì¶ **T√¨nh tr·∫°ng kho h√†ng:**

‚ö†Ô∏è **C·∫ßn ƒë·∫∑t h√†ng (2 m·∫∑t h√†ng):**
‚Ä¢ Gasket Seal - C√≤n 8/10 (T·ªëi thi·ªÉu)
‚Ä¢ Air Filter - C√≤n 3/8 (D∆∞·ªõi m·ª©c t·ªëi thi·ªÉu)

‚úÖ **ƒê·ªß h√†ng:**
‚Ä¢ Hydraulic Oil - 45 l√≠t
‚Ä¢ Ball Bearing Set - 15 b·ªô
‚Ä¢ 3HP Electric Motor - 2 chi·∫øc

üí∞ **T·ªïng gi√° tr·ªã kho:** $12.5K

üõí **Khuy·∫øn ngh·ªã:** ƒê·∫∑t h√†ng ngay Air Filter ƒë·ªÉ tr√°nh thi·∫øu h·ª•t.`;
    }

    // B√°o c√°o
    if (message.includes('b√°o c√°o') || message.includes('report') || message.includes('th·ªëng k√™')) {
      return `üìà **B√°o c√°o t·ªïng quan:**

**Hi·ªáu su·∫•t thi·∫øt b·ªã:**
‚Ä¢ T·ª∑ l·ªá ho·∫°t ƒë·ªông: 75% (3/4 m√°y)
‚Ä¢ Th·ªùi gian ng·ª´ng m√°y: 8.2 gi·ªù (th√°ng n√†y)
‚Ä¢ Chi ph√≠ b·∫£o tr√¨: $2,310

**Top v·∫•n ƒë·ªÅ:**
1. Robot h√†n R3 - H·ªèng h√≥c
2. Thi·∫øu Air Filter
3. Motor bƒÉng t·∫£i c·∫ßn thay

üìä **ƒê·ªÉ xem b√°o c√°o chi ti·∫øt, v√†o m·ª•c "Reports & Analytics".**`;
    }

    // H∆∞·ªõng d·∫´n s·ª≠ d·ª•ng
    if (
      message.includes('h∆∞·ªõng d·∫´n') ||
      message.includes('help') ||
      message.includes('c√°ch s·ª≠ d·ª•ng')
    ) {
      return `üìö **H∆∞·ªõng d·∫´n s·ª≠ d·ª•ng h·ªá th·ªëng:**

**üè† Dashboard:** Xem t·ªïng quan tr·∫°ng th√°i nh√† m√°y
**üîß Equipment:** Qu·∫£n l√Ω danh s√°ch thi·∫øt b·ªã
**üìÖ Maintenance:** L√™n l·ªãch v√† theo d√µi b·∫£o tr√¨
**üì¶ Inventory:** Qu·∫£n l√Ω kho ph·ª• t√πng
**üè≠ 3D Factory:** Xem m√¥ h√¨nh 3D nh√† m√°y
**üìä Reports:** T·∫°o v√† xu·∫•t b√°o c√°o
**üë• Users:** Qu·∫£n l√Ω ng∆∞·ªùi d√πng
**‚öôÔ∏è Settings:** C√†i ƒë·∫∑t h·ªá th·ªëng

üí° **M·∫πo:** S·ª≠ d·ª•ng thanh t√¨m ki·∫øm v√† b·ªô l·ªçc ƒë·ªÉ t√¨m th√¥ng tin nhanh h∆°n!`;
    }

    // 3D Factory
    if (message.includes('3d') || message.includes('m√¥ h√¨nh') || message.includes('factory')) {
      return `üè≠ **H∆∞·ªõng d·∫´n s·ª≠ d·ª•ng 3D Factory:**

**üéÆ ƒêi·ªÅu khi·ªÉn:**
‚Ä¢ K√©o chu·ªôt ƒë·ªÉ xoay g√≥c nh√¨n
‚Ä¢ Cu·ªôn chu·ªôt ƒë·ªÉ zoom in/out
‚Ä¢ Click thi·∫øt b·ªã ƒë·ªÉ xem chi ti·∫øt

**üìπ Camera:**
‚Ä¢ Click bi·ªÉu t∆∞·ª£ng camera ƒë·ªÉ xem live stream
‚Ä¢ 5 camera gi√°m s√°t to√†n nh√† m√°y
‚Ä¢ ƒêi·ªÅu khi·ªÉn PTZ t·ª´ xa

**üé® M√†u s·∫Øc thi·∫øt b·ªã:**
‚Ä¢ üü¢ Xanh l√°: Ho·∫°t ƒë·ªông b√¨nh th∆∞·ªùng
‚Ä¢ üü† Cam: ƒêang b·∫£o tr√¨
‚Ä¢ üî¥ ƒê·ªè: H·ªèng h√≥c
‚Ä¢ ‚ö´ X√°m: T·∫Øt m√°y

**‚ú® T√≠nh nƒÉng:** Play/Pause animation, ch·∫ø ƒë·ªô xem Top/Side`;
    }

    // C√¢u h·ªèi v·ªÅ an to√†n
    if (
      message.includes('an to√†n') ||
      message.includes('safety') ||
      message.includes('nguy hi·ªÉm')
    ) {
      return `‚ö†Ô∏è **H∆∞·ªõng d·∫´n an to√†n nh√† m√°y:**

**üö® Quy t·∫Øc c∆° b·∫£n:**
‚Ä¢ Lu√¥n ƒëeo ƒë·ªì b·∫£o h·ªô khi v√†o khu v·ª±c s·∫£n xu·∫•t
‚Ä¢ T·∫Øt m√°y tr∆∞·ªõc khi b·∫£o tr√¨
‚Ä¢ B√°o c√°o ngay khi ph√°t hi·ªán s·ª± c·ªë

**üìπ Gi√°m s√°t:**
‚Ä¢ 5 camera ho·∫°t ƒë·ªông 24/7
‚Ä¢ C·∫£m bi·∫øn t·ª± ƒë·ªông ph√°t hi·ªán s·ª± c·ªë
‚Ä¢ H·ªá th·ªëng c·∫£nh b√°o t·ª©c th·ªùi

**üîß B·∫£o tr√¨ an to√†n:**
‚Ä¢ L√†m theo checklist b·∫£o tr√¨
‚Ä¢ S·ª≠ d·ª•ng ƒë√∫ng c√¥ng c·ª•
‚Ä¢ C√≥ ng∆∞·ªùi gi√°m s√°t khi c·∫ßn

**üìû Kh·∫©n c·∫•p:** Li√™n h·ªá supervisor ho·∫∑c admin ngay l·∫≠p t·ª©c!`;
    }

    // C√¢u h·ªèi v·ªÅ hi·ªáu su·∫•t
    if (
      message.includes('hi·ªáu su·∫•t') ||
      message.includes('performance') ||
      message.includes('nƒÉng su·∫•t')
    ) {
      return `üìä **Ph√¢n t√≠ch hi·ªáu su·∫•t nh√† m√°y:**

**‚ö° Hi·ªáu su·∫•t t·ªïng th·ªÉ: 92.3%**
‚Ä¢ Hydraulic Press A1: 98.5%
‚Ä¢ CNC Machine M4: 95.0%
‚Ä¢ Conveyor Belt B2: 85.2% (ƒëang b·∫£o tr√¨)
‚Ä¢ Welding Robot R3: 0% (h·ªèng h√≥c)

**üìà Xu h∆∞·ªõng:**
‚Ä¢ TƒÉng 5% so v·ªõi th√°ng tr∆∞·ªõc
‚Ä¢ Gi·∫£m th·ªùi gian ng·ª´ng m√°y 15%
‚Ä¢ Ti·∫øt ki·ªám chi ph√≠ b·∫£o tr√¨ 8%

**üéØ M·ª•c ti√™u:**
‚Ä¢ ƒê·∫°t 95% hi·ªáu su·∫•t t·ªïng th·ªÉ
‚Ä¢ Gi·∫£m th·ªùi gian s·ª≠a ch·ªØa xu·ªëng 4 gi·ªù/th√°ng

**üí° Khuy·∫øn ngh·ªã:** S·ª≠a Robot R3 ƒë·ªÉ tƒÉng hi·ªáu su·∫•t l√™n 98%+`;
    }

    // C√¢u h·ªèi chung
    if (message.includes('xin ch√†o') || message.includes('hello') || message.includes('hi')) {
      return `üëã Xin ch√†o! T√¥i l√† AI Assistant c·ªßa h·ªá th·ªëng qu·∫£n l√Ω nh√† m√°y.

T√¥i c√≥ th·ªÉ gi√∫p b·∫°n:
‚Ä¢ üìä Ki·ªÉm tra tr·∫°ng th√°i thi·∫øt b·ªã
‚Ä¢ üîß Qu·∫£n l√Ω b·∫£o tr√¨
‚Ä¢ üì¶ Theo d√µi kho h√†ng  
‚Ä¢ üìà T·∫°o b√°o c√°o
‚Ä¢ üè≠ H∆∞·ªõng d·∫´n s·ª≠ d·ª•ng 3D Factory
‚Ä¢ ‚öôÔ∏è C√†i ƒë·∫∑t h·ªá th·ªëng

B·∫°n mu·ªën h·ªèi v·ªÅ v·∫•n ƒë·ªÅ g√¨?`;
    }

    // C√¢u tr·∫£ l·ªùi m·∫∑c ƒë·ªãnh
    return `ü§ñ T√¥i hi·ªÉu b·∫°n ƒëang h·ªèi v·ªÅ "${userMessage}".

T√¥i c√≥ th·ªÉ h·ªó tr·ª£ b·∫°n v·ªÅ:
‚Ä¢ **"thi·∫øt b·ªã"** - Ki·ªÉm tra tr·∫°ng th√°i m√°y m√≥c
‚Ä¢ **"b·∫£o tr√¨"** - L·ªãch b·∫£o tr√¨ v√† s·ª≠a ch·ªØa  
‚Ä¢ **"kho h√†ng"** - T√¨nh tr·∫°ng t·ªìn kho
‚Ä¢ **"b√°o c√°o"** - Th·ªëng k√™ v√† ph√¢n t√≠ch
‚Ä¢ **"3D"** - H∆∞·ªõng d·∫´n s·ª≠ d·ª•ng m√¥ h√¨nh 3D
‚Ä¢ **"an to√†n"** - Quy t·∫Øc an to√†n nh√† m√°y
‚Ä¢ **"hi·ªáu su·∫•t"** - Ph√¢n t√≠ch nƒÉng su·∫•t

Ho·∫∑c b·∫°n c√≥ th·ªÉ h·ªèi c·ª• th·ªÉ h∆°n v·ªÅ v·∫•n ƒë·ªÅ c·∫ßn h·ªó tr·ª£! üòä`;
  };

  const handleSendMessage = () => {
    if (!inputMessage.trim()) return;

    const userMessage: Message = {
      id: Date.now().toString(),
      type: 'user',
      content: inputMessage.trim(),
      timestamp: new Date(),
    };

    setMessages(prev => [...prev, userMessage]);
    setInputMessage('');
    setIsTyping(true);

    // Simulate AI thinking time
    setTimeout(
      () => {
        const aiResponse: Message = {
          id: (Date.now() + 1).toString(),
          type: 'ai',
          content: getAIResponse(inputMessage.trim()),
          timestamp: new Date(),
        };

        setMessages(prev => [...prev, aiResponse]);
        setIsTyping(false);
      },
      1000 + Math.random() * 2000
    );
  };

  const handleKeyPress = (e: React.KeyboardEvent) => {
    if (e.key === 'Enter' && !e.shiftKey) {
      e.preventDefault();
      handleSendMessage();
    }
  };

  const clearChat = () => {
    setMessages([
      {
        id: '1',
        type: 'ai',
        content:
          'Xin ch√†o! T√¥i l√† AI Assistant c·ªßa h·ªá th·ªëng qu·∫£n l√Ω nh√† m√°y. T√¥i c√≥ th·ªÉ gi√∫p b·∫°n:\n\n‚Ä¢ Ki·ªÉm tra tr·∫°ng th√°i thi·∫øt b·ªã\n‚Ä¢ L√™n l·ªãch b·∫£o tr√¨\n‚Ä¢ Qu·∫£n l√Ω kho h√†ng\n‚Ä¢ T·∫°o b√°o c√°o\n‚Ä¢ H∆∞·ªõng d·∫´n s·ª≠ d·ª•ng h·ªá th·ªëng\n\nB·∫°n c·∫ßn h·ªó tr·ª£ g√¨?',
        timestamp: new Date(),
      },
    ]);
  };

  if (!isOpen) {
    return (
      <button
        onClick={onToggle}
        className="fixed bottom-6 right-6 bg-gradient-to-r from-blue-600 to-indigo-600 hover:from-blue-700 hover:to-indigo-700 text-white p-4 rounded-full shadow-2xl hover:shadow-3xl transition-all duration-300 transform hover:scale-110 z-50 group"
      >
        <MessageCircle size={24} />
        <div className="absolute -top-2 -right-2 w-6 h-6 bg-red-500 rounded-full flex items-center justify-center">
          <Bot size={12} className="text-white" />
        </div>
        <div className="absolute bottom-full right-0 mb-2 px-3 py-2 bg-black/80 text-white text-sm rounded-lg opacity-0 group-hover:opacity-100 transition-opacity duration-300 whitespace-nowrap">
          AI Assistant
        </div>
      </button>
    );
  }

  return (
    <div
      className={`fixed bottom-6 right-6 bg-white rounded-2xl shadow-2xl border border-gray-200 z-50 transition-all duration-300 ${
        isMinimized ? 'w-80 h-16' : 'w-96 h-[600px]'
      }`}
    >
      {/* Header */}
      <div className="flex items-center justify-between p-4 bg-gradient-to-r from-blue-600 to-indigo-600 text-white rounded-t-2xl">
        <div className="flex items-center gap-3">
          <div className="w-10 h-10 bg-white/20 rounded-full flex items-center justify-center">
            <Bot size={20} />
          </div>
          <div>
            <h3 className="font-semibold">AI Assistant</h3>
            <p className="text-xs text-blue-100">Factory Management System</p>
          </div>
        </div>
        <div className="flex items-center gap-2">
          <button
            onClick={clearChat}
            className="p-2 hover:bg-white/20 rounded-lg transition-colors"
            title="Clear Chat"
          >
            <RotateCcw size={16} />
          </button>
          <button
            onClick={() => setIsMinimized(!isMinimized)}
            className="p-2 hover:bg-white/20 rounded-lg transition-colors"
            title={isMinimized ? 'Maximize' : 'Minimize'}
          >
            {isMinimized ? <Maximize2 size={16} /> : <Minimize2 size={16} />}
          </button>
          <button
            onClick={onToggle}
            className="p-2 hover:bg-white/20 rounded-lg transition-colors"
            title="Close Chat"
          >
            <X size={16} />
          </button>
        </div>
      </div>

      {!isMinimized && (
        <>
          {/* Messages */}
          <div className="flex-1 p-4 h-[480px] overflow-y-auto space-y-4">
            {messages.map(message => (
              <div
                key={message.id}
                className={`flex ${message.type === 'user' ? 'justify-end' : 'justify-start'}`}
              >
                <div
                  className={`flex items-start gap-3 max-w-[85%] ${
                    message.type === 'user' ? 'flex-row-reverse' : 'flex-row'
                  }`}
                >
                  <div
                    className={`w-8 h-8 rounded-full flex items-center justify-center flex-shrink-0 ${
                      message.type === 'user'
                        ? 'bg-blue-600 text-white'
                        : 'bg-gradient-to-r from-purple-500 to-pink-500 text-white'
                    }`}
                  >
                    {message.type === 'user' ? <User size={16} /> : <Bot size={16} />}
                  </div>
                  <div
                    className={`rounded-2xl px-4 py-3 ${
                      message.type === 'user'
                        ? 'bg-blue-600 text-white rounded-br-md'
                        : 'bg-gray-100 text-gray-900 rounded-bl-md'
                    }`}
                  >
                    <div className="text-sm whitespace-pre-wrap">{message.content}</div>
                    <div
                      className={`text-xs mt-2 ${
                        message.type === 'user' ? 'text-blue-100' : 'text-gray-500'
                      }`}
                    >
                      {message.timestamp.toLocaleTimeString()}
                    </div>
                  </div>
                </div>
              </div>
            ))}

            {isTyping && (
              <div className="flex justify-start">
                <div className="flex items-start gap-3">
                  <div className="w-8 h-8 rounded-full bg-gradient-to-r from-purple-500 to-pink-500 text-white flex items-center justify-center">
                    <Bot size={16} />
                  </div>
                  <div className="bg-gray-100 rounded-2xl rounded-bl-md px-4 py-3">
                    <div className="flex space-x-1">
                      <div className="w-2 h-2 bg-gray-400 rounded-full animate-bounce"></div>
                      <div
                        className="w-2 h-2 bg-gray-400 rounded-full animate-bounce"
                        style={{ animationDelay: '0.1s' }}
                      ></div>
                      <div
                        className="w-2 h-2 bg-gray-400 rounded-full animate-bounce"
                        style={{ animationDelay: '0.2s' }}
                      ></div>
                    </div>
                  </div>
                </div>
              </div>
            )}
            <div ref={messagesEndRef} />
          </div>

          {/* Input */}
          <div className="p-4 border-t border-gray-200">
            <div className="flex items-center gap-3">
              <input
                ref={inputRef}
                type="text"
                value={inputMessage}
                onChange={e => setInputMessage(e.target.value)}
                onKeyPress={handleKeyPress}
                placeholder="Nh·∫≠p c√¢u h·ªèi c·ªßa b·∫°n..."
                className="flex-1 border border-gray-300 rounded-xl px-4 py-3 focus:ring-2 focus:ring-blue-500 focus:border-transparent transition-all duration-200 text-sm"
                disabled={isTyping}
              />
              <button
                onClick={handleSendMessage}
                disabled={!inputMessage.trim() || isTyping}
                className="bg-gradient-to-r from-blue-600 to-indigo-600 hover:from-blue-700 hover:to-indigo-700 disabled:from-gray-400 disabled:to-gray-500 text-white p-3 rounded-xl transition-all duration-200 transform hover:scale-105 disabled:transform-none disabled:cursor-not-allowed"
              >
                <Send size={16} />
              </button>
            </div>

            {/* Quick Actions */}
            <div className="flex flex-wrap gap-2 mt-3">
              <button
                onClick={() => setInputMessage('Ki·ªÉm tra tr·∫°ng th√°i thi·∫øt b·ªã')}
                className="text-xs bg-gray-100 hover:bg-gray-200 text-gray-700 px-3 py-1 rounded-full transition-colors"
              >
                üìä Tr·∫°ng th√°i thi·∫øt b·ªã
              </button>
              <button
                onClick={() => setInputMessage('L·ªãch b·∫£o tr√¨')}
                className="text-xs bg-gray-100 hover:bg-gray-200 text-gray-700 px-3 py-1 rounded-full transition-colors"
              >
                üîß B·∫£o tr√¨
              </button>
              <button
                onClick={() => setInputMessage('T√¨nh tr·∫°ng kho h√†ng')}
                className="text-xs bg-gray-100 hover:bg-gray-200 text-gray-700 px-3 py-1 rounded-full transition-colors"
              >
                üì¶ Kho h√†ng
              </button>
            </div>
          </div>
        </>
      )}
    </div>
  );
}
